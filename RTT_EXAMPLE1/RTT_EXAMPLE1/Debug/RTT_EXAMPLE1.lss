
RTT_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d4c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20400000  00400d4c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000bc  20400434  00401180  00020434  2**2
                  ALLOC
  3 .stack        00002000  204004f0  0040123c  00020434  2**0
                  ALLOC
  4 .heap         00000200  204024f0  0040323c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000db0c  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e6b  00000000  00000000  0002dfc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002b7c  00000000  00000000  0002fe32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000690  00000000  00000000  000329ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000730  00000000  00000000  0003303e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ccfa  00000000  00000000  0003376e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000808e  00000000  00000000  00050468  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000899a9  00000000  00000000  000584f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000ee8  00000000  00000000  000e1ea0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 24 40 20 1d 08 40 00 19 08 40 00 19 08 40 00     .$@ ..@...@...@.
  400010:	19 08 40 00 19 08 40 00 19 08 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	19 08 40 00 19 08 40 00 00 00 00 00 19 08 40 00     ..@...@.......@.
  40003c:	19 08 40 00 19 08 40 00 19 08 40 00 19 08 40 00     ..@...@...@...@.
  40004c:	d5 0a 40 00 19 08 40 00 19 08 40 00 19 08 40 00     ..@...@...@...@.
  40005c:	19 08 40 00 19 08 40 00 00 00 00 00 b5 02 40 00     ..@...@.......@.
  40006c:	c9 02 40 00 dd 02 40 00 19 08 40 00 19 08 40 00     ..@...@...@...@.
  40007c:	19 08 40 00 f1 02 40 00 05 03 40 00 19 08 40 00     ..@...@...@...@.
  40008c:	19 08 40 00 19 08 40 00 19 08 40 00 19 08 40 00     ..@...@...@...@.
  40009c:	19 08 40 00 19 08 40 00 19 08 40 00 19 08 40 00     ..@...@...@...@.
  4000ac:	19 08 40 00 19 08 40 00 19 08 40 00 19 08 40 00     ..@...@...@...@.
  4000bc:	19 08 40 00 19 08 40 00 19 08 40 00 19 08 40 00     ..@...@...@...@.
  4000cc:	19 08 40 00 00 00 00 00 19 08 40 00 00 00 00 00     ..@.......@.....
  4000dc:	19 08 40 00 19 08 40 00 19 08 40 00 19 08 40 00     ..@...@...@...@.
  4000ec:	19 08 40 00 19 08 40 00 19 08 40 00 19 08 40 00     ..@...@...@...@.
  4000fc:	19 08 40 00 19 08 40 00 19 08 40 00 19 08 40 00     ..@...@...@...@.
  40010c:	19 08 40 00 19 08 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 19 08 40 00 19 08 40 00 19 08 40 00     ......@...@...@.
  40012c:	19 08 40 00 19 08 40 00 00 00 00 00 19 08 40 00     ..@...@.......@.
  40013c:	19 08 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400434 	.word	0x20400434
  40015c:	00000000 	.word	0x00000000
  400160:	00400d4c 	.word	0x00400d4c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00400d4c 	.word	0x00400d4c
  4001a0:	20400438 	.word	0x20400438
  4001a4:	00400d4c 	.word	0x00400d4c
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4001da:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001dc:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001de:	2060      	movs	r0, #96	; 0x60
  4001e0:	4b0c      	ldr	r3, [pc, #48]	; (400214 <sysclk_init+0x68>)
  4001e2:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e4:	4b0c      	ldr	r3, [pc, #48]	; (400218 <sysclk_init+0x6c>)
  4001e6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e8:	480c      	ldr	r0, [pc, #48]	; (40021c <sysclk_init+0x70>)
  4001ea:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ec:	4798      	blx	r3
  4001ee:	bd10      	pop	{r4, pc}
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	004009f1 	.word	0x004009f1
  4001f8:	004003b5 	.word	0x004003b5
  4001fc:	00400409 	.word	0x00400409
  400200:	00400419 	.word	0x00400419
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400429 	.word	0x00400429
  400210:	00400319 	.word	0x00400319
  400214:	00400351 	.word	0x00400351
  400218:	004008e5 	.word	0x004008e5
  40021c:	0047868c 	.word	0x0047868c

00400220 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400220:	6301      	str	r1, [r0, #48]	; 0x30
  400222:	4770      	bx	lr

00400224 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400224:	6341      	str	r1, [r0, #52]	; 0x34
  400226:	4770      	bx	lr

00400228 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400228:	b410      	push	{r4}
  40022a:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40022c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40022e:	b94c      	cbnz	r4, 400244 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400230:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400232:	b14b      	cbz	r3, 400248 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400234:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400236:	b94a      	cbnz	r2, 40024c <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400238:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40023a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40023c:	6001      	str	r1, [r0, #0]
}
  40023e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400242:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400244:	6641      	str	r1, [r0, #100]	; 0x64
  400246:	e7f4      	b.n	400232 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400248:	6541      	str	r1, [r0, #84]	; 0x54
  40024a:	e7f4      	b.n	400236 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40024c:	6301      	str	r1, [r0, #48]	; 0x30
  40024e:	e7f4      	b.n	40023a <pio_set_output+0x12>

00400250 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400250:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400252:	420b      	tst	r3, r1
}
  400254:	bf14      	ite	ne
  400256:	2001      	movne	r0, #1
  400258:	2000      	moveq	r0, #0
  40025a:	4770      	bx	lr

0040025c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40025c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40025e:	4770      	bx	lr

00400260 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400260:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400262:	4770      	bx	lr

00400264 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400268:	4604      	mov	r4, r0
  40026a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40026c:	4b0e      	ldr	r3, [pc, #56]	; (4002a8 <pio_handler_process+0x44>)
  40026e:	4798      	blx	r3
  400270:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400272:	4620      	mov	r0, r4
  400274:	4b0d      	ldr	r3, [pc, #52]	; (4002ac <pio_handler_process+0x48>)
  400276:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400278:	4005      	ands	r5, r0
  40027a:	d013      	beq.n	4002a4 <pio_handler_process+0x40>
  40027c:	4c0c      	ldr	r4, [pc, #48]	; (4002b0 <pio_handler_process+0x4c>)
  40027e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400282:	e003      	b.n	40028c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400284:	42b4      	cmp	r4, r6
  400286:	d00d      	beq.n	4002a4 <pio_handler_process+0x40>
  400288:	3410      	adds	r4, #16
		while (status != 0) {
  40028a:	b15d      	cbz	r5, 4002a4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40028c:	6820      	ldr	r0, [r4, #0]
  40028e:	4540      	cmp	r0, r8
  400290:	d1f8      	bne.n	400284 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400292:	6861      	ldr	r1, [r4, #4]
  400294:	4229      	tst	r1, r5
  400296:	d0f5      	beq.n	400284 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400298:	68e3      	ldr	r3, [r4, #12]
  40029a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40029c:	6863      	ldr	r3, [r4, #4]
  40029e:	ea25 0503 	bic.w	r5, r5, r3
  4002a2:	e7ef      	b.n	400284 <pio_handler_process+0x20>
  4002a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002a8:	0040025d 	.word	0x0040025d
  4002ac:	00400261 	.word	0x00400261
  4002b0:	20400450 	.word	0x20400450

004002b4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4002b4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4002b6:	210a      	movs	r1, #10
  4002b8:	4801      	ldr	r0, [pc, #4]	; (4002c0 <PIOA_Handler+0xc>)
  4002ba:	4b02      	ldr	r3, [pc, #8]	; (4002c4 <PIOA_Handler+0x10>)
  4002bc:	4798      	blx	r3
  4002be:	bd08      	pop	{r3, pc}
  4002c0:	400e0e00 	.word	0x400e0e00
  4002c4:	00400265 	.word	0x00400265

004002c8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4002c8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4002ca:	210b      	movs	r1, #11
  4002cc:	4801      	ldr	r0, [pc, #4]	; (4002d4 <PIOB_Handler+0xc>)
  4002ce:	4b02      	ldr	r3, [pc, #8]	; (4002d8 <PIOB_Handler+0x10>)
  4002d0:	4798      	blx	r3
  4002d2:	bd08      	pop	{r3, pc}
  4002d4:	400e1000 	.word	0x400e1000
  4002d8:	00400265 	.word	0x00400265

004002dc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4002dc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4002de:	210c      	movs	r1, #12
  4002e0:	4801      	ldr	r0, [pc, #4]	; (4002e8 <PIOC_Handler+0xc>)
  4002e2:	4b02      	ldr	r3, [pc, #8]	; (4002ec <PIOC_Handler+0x10>)
  4002e4:	4798      	blx	r3
  4002e6:	bd08      	pop	{r3, pc}
  4002e8:	400e1200 	.word	0x400e1200
  4002ec:	00400265 	.word	0x00400265

004002f0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4002f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4002f2:	2110      	movs	r1, #16
  4002f4:	4801      	ldr	r0, [pc, #4]	; (4002fc <PIOD_Handler+0xc>)
  4002f6:	4b02      	ldr	r3, [pc, #8]	; (400300 <PIOD_Handler+0x10>)
  4002f8:	4798      	blx	r3
  4002fa:	bd08      	pop	{r3, pc}
  4002fc:	400e1400 	.word	0x400e1400
  400300:	00400265 	.word	0x00400265

00400304 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400304:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400306:	2111      	movs	r1, #17
  400308:	4801      	ldr	r0, [pc, #4]	; (400310 <PIOE_Handler+0xc>)
  40030a:	4b02      	ldr	r3, [pc, #8]	; (400314 <PIOE_Handler+0x10>)
  40030c:	4798      	blx	r3
  40030e:	bd08      	pop	{r3, pc}
  400310:	400e1600 	.word	0x400e1600
  400314:	00400265 	.word	0x00400265

00400318 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400318:	2803      	cmp	r0, #3
  40031a:	d011      	beq.n	400340 <pmc_mck_set_division+0x28>
  40031c:	2804      	cmp	r0, #4
  40031e:	d012      	beq.n	400346 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400320:	2802      	cmp	r0, #2
  400322:	bf0c      	ite	eq
  400324:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400328:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40032a:	4a08      	ldr	r2, [pc, #32]	; (40034c <pmc_mck_set_division+0x34>)
  40032c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40032e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400332:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400334:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400336:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400338:	f013 0f08 	tst.w	r3, #8
  40033c:	d0fb      	beq.n	400336 <pmc_mck_set_division+0x1e>
}
  40033e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400340:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400344:	e7f1      	b.n	40032a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400346:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40034a:	e7ee      	b.n	40032a <pmc_mck_set_division+0x12>
  40034c:	400e0600 	.word	0x400e0600

00400350 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400350:	4a17      	ldr	r2, [pc, #92]	; (4003b0 <pmc_switch_mck_to_pllack+0x60>)
  400352:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400358:	4318      	orrs	r0, r3
  40035a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40035c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40035e:	f013 0f08 	tst.w	r3, #8
  400362:	d10a      	bne.n	40037a <pmc_switch_mck_to_pllack+0x2a>
  400364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400368:	4911      	ldr	r1, [pc, #68]	; (4003b0 <pmc_switch_mck_to_pllack+0x60>)
  40036a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40036c:	f012 0f08 	tst.w	r2, #8
  400370:	d103      	bne.n	40037a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400372:	3b01      	subs	r3, #1
  400374:	d1f9      	bne.n	40036a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400376:	2001      	movs	r0, #1
  400378:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40037a:	4a0d      	ldr	r2, [pc, #52]	; (4003b0 <pmc_switch_mck_to_pllack+0x60>)
  40037c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40037e:	f023 0303 	bic.w	r3, r3, #3
  400382:	f043 0302 	orr.w	r3, r3, #2
  400386:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400388:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40038a:	f013 0f08 	tst.w	r3, #8
  40038e:	d10a      	bne.n	4003a6 <pmc_switch_mck_to_pllack+0x56>
  400390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400394:	4906      	ldr	r1, [pc, #24]	; (4003b0 <pmc_switch_mck_to_pllack+0x60>)
  400396:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400398:	f012 0f08 	tst.w	r2, #8
  40039c:	d105      	bne.n	4003aa <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40039e:	3b01      	subs	r3, #1
  4003a0:	d1f9      	bne.n	400396 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4003a2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4003a4:	4770      	bx	lr
	return 0;
  4003a6:	2000      	movs	r0, #0
  4003a8:	4770      	bx	lr
  4003aa:	2000      	movs	r0, #0
  4003ac:	4770      	bx	lr
  4003ae:	bf00      	nop
  4003b0:	400e0600 	.word	0x400e0600

004003b4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4003b4:	b9a0      	cbnz	r0, 4003e0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4003b6:	480e      	ldr	r0, [pc, #56]	; (4003f0 <pmc_switch_mainck_to_xtal+0x3c>)
  4003b8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4003ba:	0209      	lsls	r1, r1, #8
  4003bc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4003be:	4a0d      	ldr	r2, [pc, #52]	; (4003f4 <pmc_switch_mainck_to_xtal+0x40>)
  4003c0:	401a      	ands	r2, r3
  4003c2:	4b0d      	ldr	r3, [pc, #52]	; (4003f8 <pmc_switch_mainck_to_xtal+0x44>)
  4003c4:	4313      	orrs	r3, r2
  4003c6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4003c8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4003ca:	4602      	mov	r2, r0
  4003cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4003ce:	f013 0f01 	tst.w	r3, #1
  4003d2:	d0fb      	beq.n	4003cc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4003d4:	4a06      	ldr	r2, [pc, #24]	; (4003f0 <pmc_switch_mainck_to_xtal+0x3c>)
  4003d6:	6a11      	ldr	r1, [r2, #32]
  4003d8:	4b08      	ldr	r3, [pc, #32]	; (4003fc <pmc_switch_mainck_to_xtal+0x48>)
  4003da:	430b      	orrs	r3, r1
  4003dc:	6213      	str	r3, [r2, #32]
  4003de:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4003e0:	4903      	ldr	r1, [pc, #12]	; (4003f0 <pmc_switch_mainck_to_xtal+0x3c>)
  4003e2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4003e4:	4a06      	ldr	r2, [pc, #24]	; (400400 <pmc_switch_mainck_to_xtal+0x4c>)
  4003e6:	401a      	ands	r2, r3
  4003e8:	4b06      	ldr	r3, [pc, #24]	; (400404 <pmc_switch_mainck_to_xtal+0x50>)
  4003ea:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4003ec:	620b      	str	r3, [r1, #32]
  4003ee:	4770      	bx	lr
  4003f0:	400e0600 	.word	0x400e0600
  4003f4:	ffc8fffc 	.word	0xffc8fffc
  4003f8:	00370001 	.word	0x00370001
  4003fc:	01370000 	.word	0x01370000
  400400:	fec8fffc 	.word	0xfec8fffc
  400404:	01370002 	.word	0x01370002

00400408 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400408:	4b02      	ldr	r3, [pc, #8]	; (400414 <pmc_osc_is_ready_mainck+0xc>)
  40040a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40040c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400410:	4770      	bx	lr
  400412:	bf00      	nop
  400414:	400e0600 	.word	0x400e0600

00400418 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400418:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40041c:	4b01      	ldr	r3, [pc, #4]	; (400424 <pmc_disable_pllack+0xc>)
  40041e:	629a      	str	r2, [r3, #40]	; 0x28
  400420:	4770      	bx	lr
  400422:	bf00      	nop
  400424:	400e0600 	.word	0x400e0600

00400428 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400428:	4b02      	ldr	r3, [pc, #8]	; (400434 <pmc_is_locked_pllack+0xc>)
  40042a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40042c:	f000 0002 	and.w	r0, r0, #2
  400430:	4770      	bx	lr
  400432:	bf00      	nop
  400434:	400e0600 	.word	0x400e0600

00400438 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400438:	283f      	cmp	r0, #63	; 0x3f
  40043a:	d81e      	bhi.n	40047a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40043c:	281f      	cmp	r0, #31
  40043e:	d80c      	bhi.n	40045a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400440:	4b11      	ldr	r3, [pc, #68]	; (400488 <pmc_enable_periph_clk+0x50>)
  400442:	699a      	ldr	r2, [r3, #24]
  400444:	2301      	movs	r3, #1
  400446:	4083      	lsls	r3, r0
  400448:	4393      	bics	r3, r2
  40044a:	d018      	beq.n	40047e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40044c:	2301      	movs	r3, #1
  40044e:	fa03 f000 	lsl.w	r0, r3, r0
  400452:	4b0d      	ldr	r3, [pc, #52]	; (400488 <pmc_enable_periph_clk+0x50>)
  400454:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400456:	2000      	movs	r0, #0
  400458:	4770      	bx	lr
		ul_id -= 32;
  40045a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40045c:	4b0a      	ldr	r3, [pc, #40]	; (400488 <pmc_enable_periph_clk+0x50>)
  40045e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400462:	2301      	movs	r3, #1
  400464:	4083      	lsls	r3, r0
  400466:	4393      	bics	r3, r2
  400468:	d00b      	beq.n	400482 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40046a:	2301      	movs	r3, #1
  40046c:	fa03 f000 	lsl.w	r0, r3, r0
  400470:	4b05      	ldr	r3, [pc, #20]	; (400488 <pmc_enable_periph_clk+0x50>)
  400472:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400476:	2000      	movs	r0, #0
  400478:	4770      	bx	lr
		return 1;
  40047a:	2001      	movs	r0, #1
  40047c:	4770      	bx	lr
	return 0;
  40047e:	2000      	movs	r0, #0
  400480:	4770      	bx	lr
  400482:	2000      	movs	r0, #0
}
  400484:	4770      	bx	lr
  400486:	bf00      	nop
  400488:	400e0600 	.word	0x400e0600

0040048c <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  40048c:	4b03      	ldr	r3, [pc, #12]	; (40049c <pmc_set_fast_startup_input+0x10>)
  40048e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  400490:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  400494:	4310      	orrs	r0, r2
  400496:	6718      	str	r0, [r3, #112]	; 0x70
  400498:	4770      	bx	lr
  40049a:	bf00      	nop
  40049c:	400e0600 	.word	0x400e0600

004004a0 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4004a0:	4770      	bx	lr
	...

004004a4 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4004a4:	4a10      	ldr	r2, [pc, #64]	; (4004e8 <pmc_enable_waitmode+0x44>)
  4004a6:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4004a8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4004ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4004b0:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4004b2:	6a11      	ldr	r1, [r2, #32]
  4004b4:	4b0d      	ldr	r3, [pc, #52]	; (4004ec <pmc_enable_waitmode+0x48>)
  4004b6:	430b      	orrs	r3, r1
  4004b8:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4004ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4004bc:	f013 0f08 	tst.w	r3, #8
  4004c0:	d0fb      	beq.n	4004ba <pmc_enable_waitmode+0x16>
  4004c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4004c6:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  4004c8:	3b01      	subs	r3, #1
  4004ca:	d1fc      	bne.n	4004c6 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4004cc:	4a06      	ldr	r2, [pc, #24]	; (4004e8 <pmc_enable_waitmode+0x44>)
  4004ce:	6a13      	ldr	r3, [r2, #32]
  4004d0:	f013 0f08 	tst.w	r3, #8
  4004d4:	d0fb      	beq.n	4004ce <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4004d6:	4a04      	ldr	r2, [pc, #16]	; (4004e8 <pmc_enable_waitmode+0x44>)
  4004d8:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4004da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4004de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4004e2:	6713      	str	r3, [r2, #112]	; 0x70
  4004e4:	4770      	bx	lr
  4004e6:	bf00      	nop
  4004e8:	400e0600 	.word	0x400e0600
  4004ec:	00370004 	.word	0x00370004

004004f0 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4004f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  4004f4:	1e43      	subs	r3, r0, #1
  4004f6:	2b04      	cmp	r3, #4
  4004f8:	f200 8107 	bhi.w	40070a <pmc_sleep+0x21a>
  4004fc:	e8df f013 	tbh	[pc, r3, lsl #1]
  400500:	00050005 	.word	0x00050005
  400504:	00150015 	.word	0x00150015
  400508:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  40050a:	4a81      	ldr	r2, [pc, #516]	; (400710 <pmc_sleep+0x220>)
  40050c:	6913      	ldr	r3, [r2, #16]
  40050e:	f023 0304 	bic.w	r3, r3, #4
  400512:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  400514:	2201      	movs	r2, #1
  400516:	4b7f      	ldr	r3, [pc, #508]	; (400714 <pmc_sleep+0x224>)
  400518:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40051a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40051e:	b662      	cpsie	i
  __ASM volatile ("dsb");
  400520:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  400524:	bf30      	wfi
  400526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40052a:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  40052c:	2803      	cmp	r0, #3
  40052e:	bf0c      	ite	eq
  400530:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  400532:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  400536:	4b78      	ldr	r3, [pc, #480]	; (400718 <pmc_sleep+0x228>)
  400538:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40053a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40053c:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  400540:	2200      	movs	r2, #0
  400542:	4b74      	ldr	r3, [pc, #464]	; (400714 <pmc_sleep+0x224>)
  400544:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  400546:	2201      	movs	r2, #1
  400548:	4b74      	ldr	r3, [pc, #464]	; (40071c <pmc_sleep+0x22c>)
  40054a:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  40054c:	4b74      	ldr	r3, [pc, #464]	; (400720 <pmc_sleep+0x230>)
  40054e:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  400550:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  400552:	4a74      	ldr	r2, [pc, #464]	; (400724 <pmc_sleep+0x234>)
  400554:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400558:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  40055a:	4a73      	ldr	r2, [pc, #460]	; (400728 <pmc_sleep+0x238>)
  40055c:	433a      	orrs	r2, r7
  40055e:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  400560:	f005 0903 	and.w	r9, r5, #3
  400564:	f1b9 0f01 	cmp.w	r9, #1
  400568:	f240 8089 	bls.w	40067e <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  40056c:	f025 0103 	bic.w	r1, r5, #3
  400570:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  400574:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400576:	461a      	mov	r2, r3
  400578:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40057a:	f013 0f08 	tst.w	r3, #8
  40057e:	d0fb      	beq.n	400578 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  400580:	f011 0f70 	tst.w	r1, #112	; 0x70
  400584:	d008      	beq.n	400598 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  400586:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  40058a:	4b65      	ldr	r3, [pc, #404]	; (400720 <pmc_sleep+0x230>)
  40058c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40058e:	461a      	mov	r2, r3
  400590:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400592:	f013 0f08 	tst.w	r3, #8
  400596:	d0fb      	beq.n	400590 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  400598:	4b64      	ldr	r3, [pc, #400]	; (40072c <pmc_sleep+0x23c>)
  40059a:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40059c:	4a60      	ldr	r2, [pc, #384]	; (400720 <pmc_sleep+0x230>)
  40059e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4005a4:	d0fb      	beq.n	40059e <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4005a6:	4a5e      	ldr	r2, [pc, #376]	; (400720 <pmc_sleep+0x230>)
  4005a8:	6a11      	ldr	r1, [r2, #32]
  4005aa:	4b61      	ldr	r3, [pc, #388]	; (400730 <pmc_sleep+0x240>)
  4005ac:	400b      	ands	r3, r1
  4005ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4005b2:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4005b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4005ba:	d0fb      	beq.n	4005b4 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4005bc:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4005c0:	4a58      	ldr	r2, [pc, #352]	; (400724 <pmc_sleep+0x234>)
  4005c2:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4005c4:	2c04      	cmp	r4, #4
  4005c6:	d05c      	beq.n	400682 <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4005c8:	4c52      	ldr	r4, [pc, #328]	; (400714 <pmc_sleep+0x224>)
  4005ca:	2301      	movs	r3, #1
  4005cc:	7023      	strb	r3, [r4, #0]
  4005ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4005d2:	b662      	cpsie	i

		pmc_enable_waitmode();
  4005d4:	4b57      	ldr	r3, [pc, #348]	; (400734 <pmc_sleep+0x244>)
  4005d6:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4005d8:	b672      	cpsid	i
  4005da:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4005de:	2300      	movs	r3, #0
  4005e0:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4005e2:	f017 0f02 	tst.w	r7, #2
  4005e6:	d055      	beq.n	400694 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4005e8:	4a4d      	ldr	r2, [pc, #308]	; (400720 <pmc_sleep+0x230>)
  4005ea:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4005ec:	4952      	ldr	r1, [pc, #328]	; (400738 <pmc_sleep+0x248>)
  4005ee:	4019      	ands	r1, r3
  4005f0:	4b52      	ldr	r3, [pc, #328]	; (40073c <pmc_sleep+0x24c>)
  4005f2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4005f4:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4005f6:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  4005f8:	4b51      	ldr	r3, [pc, #324]	; (400740 <pmc_sleep+0x250>)
  4005fa:	400b      	ands	r3, r1
  4005fc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400600:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  400602:	4b50      	ldr	r3, [pc, #320]	; (400744 <pmc_sleep+0x254>)
  400604:	4033      	ands	r3, r6
  400606:	2b00      	cmp	r3, #0
  400608:	d06e      	beq.n	4006e8 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  40060a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  40060e:	4b44      	ldr	r3, [pc, #272]	; (400720 <pmc_sleep+0x230>)
  400610:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  400612:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  400614:	f1b9 0f02 	cmp.w	r9, #2
  400618:	d104      	bne.n	400624 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  40061a:	4a41      	ldr	r2, [pc, #260]	; (400720 <pmc_sleep+0x230>)
  40061c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40061e:	f013 0f02 	tst.w	r3, #2
  400622:	d0fb      	beq.n	40061c <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  400624:	4a3e      	ldr	r2, [pc, #248]	; (400720 <pmc_sleep+0x230>)
  400626:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  40062c:	f005 0070 	and.w	r0, r5, #112	; 0x70
  400630:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400632:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400634:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400636:	f013 0f08 	tst.w	r3, #8
  40063a:	d0fb      	beq.n	400634 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  40063c:	4b39      	ldr	r3, [pc, #228]	; (400724 <pmc_sleep+0x234>)
  40063e:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  400642:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400646:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400648:	461a      	mov	r2, r3
  40064a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40064c:	f013 0f08 	tst.w	r3, #8
  400650:	d0fb      	beq.n	40064a <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  400652:	4a33      	ldr	r2, [pc, #204]	; (400720 <pmc_sleep+0x230>)
  400654:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400656:	420b      	tst	r3, r1
  400658:	d0fc      	beq.n	400654 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  40065a:	2200      	movs	r2, #0
  40065c:	4b2f      	ldr	r3, [pc, #188]	; (40071c <pmc_sleep+0x22c>)
  40065e:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  400660:	4b39      	ldr	r3, [pc, #228]	; (400748 <pmc_sleep+0x258>)
  400662:	681b      	ldr	r3, [r3, #0]
  400664:	b11b      	cbz	r3, 40066e <pmc_sleep+0x17e>
			callback_clocks_restored();
  400666:	4798      	blx	r3
			callback_clocks_restored = NULL;
  400668:	2200      	movs	r2, #0
  40066a:	4b37      	ldr	r3, [pc, #220]	; (400748 <pmc_sleep+0x258>)
  40066c:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40066e:	2201      	movs	r2, #1
  400670:	4b28      	ldr	r3, [pc, #160]	; (400714 <pmc_sleep+0x224>)
  400672:	701a      	strb	r2, [r3, #0]
  400674:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400678:	b662      	cpsie	i
  40067a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  40067e:	4629      	mov	r1, r5
  400680:	e77e      	b.n	400580 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400682:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  400686:	6a11      	ldr	r1, [r2, #32]
  400688:	4b30      	ldr	r3, [pc, #192]	; (40074c <pmc_sleep+0x25c>)
  40068a:	400b      	ands	r3, r1
  40068c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400690:	6213      	str	r3, [r2, #32]
  400692:	e799      	b.n	4005c8 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  400694:	f017 0f01 	tst.w	r7, #1
  400698:	d0b3      	beq.n	400602 <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  40069a:	4b21      	ldr	r3, [pc, #132]	; (400720 <pmc_sleep+0x230>)
  40069c:	6a1b      	ldr	r3, [r3, #32]
  40069e:	f013 0f01 	tst.w	r3, #1
  4006a2:	d10b      	bne.n	4006bc <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4006a4:	491e      	ldr	r1, [pc, #120]	; (400720 <pmc_sleep+0x230>)
  4006a6:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4006a8:	4a29      	ldr	r2, [pc, #164]	; (400750 <pmc_sleep+0x260>)
  4006aa:	401a      	ands	r2, r3
  4006ac:	4b29      	ldr	r3, [pc, #164]	; (400754 <pmc_sleep+0x264>)
  4006ae:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4006b0:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4006b2:	460a      	mov	r2, r1
  4006b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006b6:	f013 0f01 	tst.w	r3, #1
  4006ba:	d0fb      	beq.n	4006b4 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4006bc:	4b18      	ldr	r3, [pc, #96]	; (400720 <pmc_sleep+0x230>)
  4006be:	6a1b      	ldr	r3, [r3, #32]
  4006c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4006c4:	d108      	bne.n	4006d8 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4006c6:	4a16      	ldr	r2, [pc, #88]	; (400720 <pmc_sleep+0x230>)
  4006c8:	6a11      	ldr	r1, [r2, #32]
  4006ca:	4b23      	ldr	r3, [pc, #140]	; (400758 <pmc_sleep+0x268>)
  4006cc:	430b      	orrs	r3, r1
  4006ce:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4006d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006d2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4006d6:	d0fb      	beq.n	4006d0 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4006d8:	4a11      	ldr	r2, [pc, #68]	; (400720 <pmc_sleep+0x230>)
  4006da:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  4006dc:	4b18      	ldr	r3, [pc, #96]	; (400740 <pmc_sleep+0x250>)
  4006de:	400b      	ands	r3, r1
  4006e0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4006e4:	6213      	str	r3, [r2, #32]
  4006e6:	e78c      	b.n	400602 <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  4006e8:	2100      	movs	r1, #0
  4006ea:	e793      	b.n	400614 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  4006ec:	4a08      	ldr	r2, [pc, #32]	; (400710 <pmc_sleep+0x220>)
  4006ee:	6913      	ldr	r3, [r2, #16]
  4006f0:	f043 0304 	orr.w	r3, r3, #4
  4006f4:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  4006f6:	4a19      	ldr	r2, [pc, #100]	; (40075c <pmc_sleep+0x26c>)
  4006f8:	4b19      	ldr	r3, [pc, #100]	; (400760 <pmc_sleep+0x270>)
  4006fa:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  4006fc:	2201      	movs	r2, #1
  4006fe:	4b05      	ldr	r3, [pc, #20]	; (400714 <pmc_sleep+0x224>)
  400700:	701a      	strb	r2, [r3, #0]
  400702:	f3bf 8f5f 	dmb	sy
  400706:	b662      	cpsie	i
  __ASM volatile ("wfi");
  400708:	bf30      	wfi
  40070a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40070e:	bf00      	nop
  400710:	e000ed00 	.word	0xe000ed00
  400714:	20400000 	.word	0x20400000
  400718:	004004a1 	.word	0x004004a1
  40071c:	204004c0 	.word	0x204004c0
  400720:	400e0600 	.word	0x400e0600
  400724:	400e0c00 	.word	0x400e0c00
  400728:	00370008 	.word	0x00370008
  40072c:	00400419 	.word	0x00400419
  400730:	fec8ffff 	.word	0xfec8ffff
  400734:	004004a5 	.word	0x004004a5
  400738:	fec8fffc 	.word	0xfec8fffc
  40073c:	01370002 	.word	0x01370002
  400740:	ffc8ff87 	.word	0xffc8ff87
  400744:	07ff0000 	.word	0x07ff0000
  400748:	204004c4 	.word	0x204004c4
  40074c:	ffc8fffe 	.word	0xffc8fffe
  400750:	ffc8fffc 	.word	0xffc8fffc
  400754:	00370001 	.word	0x00370001
  400758:	01370000 	.word	0x01370000
  40075c:	a5000004 	.word	0xa5000004
  400760:	400e1810 	.word	0x400e1810

00400764 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400764:	4b03      	ldr	r3, [pc, #12]	; (400774 <rtt_init+0x10>)
  400766:	681b      	ldr	r3, [r3, #0]
  400768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  40076c:	4319      	orrs	r1, r3
  40076e:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400770:	2000      	movs	r0, #0
  400772:	4770      	bx	lr
  400774:	204004c8 	.word	0x204004c8

00400778 <rtt_enable>:
 *
 * \param p_rtt Pointer to an RTT instance.
 */
void rtt_enable(Rtt *p_rtt)
{
	g_wobits_in_rtt_mr &= ~RTT_MR_RTTDIS;
  400778:	4a04      	ldr	r2, [pc, #16]	; (40078c <rtt_enable+0x14>)
  40077a:	6813      	ldr	r3, [r2, #0]
  40077c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  400780:	6013      	str	r3, [r2, #0]
	p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400782:	6802      	ldr	r2, [r0, #0]
  400784:	4313      	orrs	r3, r2
  400786:	6003      	str	r3, [r0, #0]
  400788:	4770      	bx	lr
  40078a:	bf00      	nop
  40078c:	204004c8 	.word	0x204004c8

00400790 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  400790:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400792:	4b03      	ldr	r3, [pc, #12]	; (4007a0 <rtt_enable_interrupt+0x10>)
  400794:	681b      	ldr	r3, [r3, #0]
  400796:	4319      	orrs	r1, r3
  400798:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  40079a:	6001      	str	r1, [r0, #0]
  40079c:	4770      	bx	lr
  40079e:	bf00      	nop
  4007a0:	204004c8 	.word	0x204004c8

004007a4 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  4007a4:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  4007a6:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4007aa:	4b02      	ldr	r3, [pc, #8]	; (4007b4 <rtt_disable_interrupt+0x10>)
  4007ac:	681b      	ldr	r3, [r3, #0]
  4007ae:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  4007b0:	6001      	str	r1, [r0, #0]
  4007b2:	4770      	bx	lr
  4007b4:	204004c8 	.word	0x204004c8

004007b8 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  4007b8:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  4007ba:	6883      	ldr	r3, [r0, #8]
  4007bc:	429a      	cmp	r2, r3
  4007be:	d003      	beq.n	4007c8 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  4007c0:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  4007c2:	6883      	ldr	r3, [r0, #8]
  4007c4:	4293      	cmp	r3, r2
  4007c6:	d1fb      	bne.n	4007c0 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  4007c8:	4618      	mov	r0, r3
  4007ca:	4770      	bx	lr

004007cc <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  4007cc:	68c0      	ldr	r0, [r0, #12]
}
  4007ce:	4770      	bx	lr

004007d0 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  4007d0:	b570      	push	{r4, r5, r6, lr}
  4007d2:	4606      	mov	r6, r0
  4007d4:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  4007d6:	6804      	ldr	r4, [r0, #0]
  4007d8:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  4007dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4007e0:	4809      	ldr	r0, [pc, #36]	; (400808 <rtt_write_alarm_time+0x38>)
  4007e2:	4b0a      	ldr	r3, [pc, #40]	; (40080c <rtt_write_alarm_time+0x3c>)
  4007e4:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  4007e6:	b92d      	cbnz	r5, 4007f4 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  4007e8:	f04f 33ff 	mov.w	r3, #4294967295
  4007ec:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  4007ee:	b924      	cbnz	r4, 4007fa <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  4007f0:	2000      	movs	r0, #0
  4007f2:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  4007f4:	3d01      	subs	r5, #1
  4007f6:	6075      	str	r5, [r6, #4]
  4007f8:	e7f9      	b.n	4007ee <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  4007fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4007fe:	4802      	ldr	r0, [pc, #8]	; (400808 <rtt_write_alarm_time+0x38>)
  400800:	4b03      	ldr	r3, [pc, #12]	; (400810 <rtt_write_alarm_time+0x40>)
  400802:	4798      	blx	r3
  400804:	e7f4      	b.n	4007f0 <rtt_write_alarm_time+0x20>
  400806:	bf00      	nop
  400808:	400e1830 	.word	0x400e1830
  40080c:	004007a5 	.word	0x004007a5
  400810:	00400791 	.word	0x00400791

00400814 <supc_set_wakeup_mode>:
 * \param p_supc Pointer to a SUPC instance.
 * \param ul_mode Bitmask of wake up mode (please refer to datasheet for more details).
 */
void supc_set_wakeup_mode(Supc *p_supc, uint32_t ul_mode)
{
	p_supc->SUPC_WUMR = ul_mode;
  400814:	60c1      	str	r1, [r0, #12]
  400816:	4770      	bx	lr

00400818 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400818:	e7fe      	b.n	400818 <Dummy_Handler>
	...

0040081c <Reset_Handler>:
{
  40081c:	b500      	push	{lr}
  40081e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400820:	4b25      	ldr	r3, [pc, #148]	; (4008b8 <Reset_Handler+0x9c>)
  400822:	4a26      	ldr	r2, [pc, #152]	; (4008bc <Reset_Handler+0xa0>)
  400824:	429a      	cmp	r2, r3
  400826:	d010      	beq.n	40084a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400828:	4b25      	ldr	r3, [pc, #148]	; (4008c0 <Reset_Handler+0xa4>)
  40082a:	4a23      	ldr	r2, [pc, #140]	; (4008b8 <Reset_Handler+0x9c>)
  40082c:	429a      	cmp	r2, r3
  40082e:	d20c      	bcs.n	40084a <Reset_Handler+0x2e>
  400830:	3b01      	subs	r3, #1
  400832:	1a9b      	subs	r3, r3, r2
  400834:	f023 0303 	bic.w	r3, r3, #3
  400838:	3304      	adds	r3, #4
  40083a:	4413      	add	r3, r2
  40083c:	491f      	ldr	r1, [pc, #124]	; (4008bc <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40083e:	f851 0b04 	ldr.w	r0, [r1], #4
  400842:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400846:	429a      	cmp	r2, r3
  400848:	d1f9      	bne.n	40083e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40084a:	4b1e      	ldr	r3, [pc, #120]	; (4008c4 <Reset_Handler+0xa8>)
  40084c:	4a1e      	ldr	r2, [pc, #120]	; (4008c8 <Reset_Handler+0xac>)
  40084e:	429a      	cmp	r2, r3
  400850:	d20a      	bcs.n	400868 <Reset_Handler+0x4c>
  400852:	3b01      	subs	r3, #1
  400854:	1a9b      	subs	r3, r3, r2
  400856:	f023 0303 	bic.w	r3, r3, #3
  40085a:	3304      	adds	r3, #4
  40085c:	4413      	add	r3, r2
                *pDest++ = 0;
  40085e:	2100      	movs	r1, #0
  400860:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400864:	4293      	cmp	r3, r2
  400866:	d1fb      	bne.n	400860 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400868:	4a18      	ldr	r2, [pc, #96]	; (4008cc <Reset_Handler+0xb0>)
  40086a:	4b19      	ldr	r3, [pc, #100]	; (4008d0 <Reset_Handler+0xb4>)
  40086c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400870:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400872:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400876:	fab3 f383 	clz	r3, r3
  40087a:	095b      	lsrs	r3, r3, #5
  40087c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40087e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400880:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400884:	2200      	movs	r2, #0
  400886:	4b13      	ldr	r3, [pc, #76]	; (4008d4 <Reset_Handler+0xb8>)
  400888:	701a      	strb	r2, [r3, #0]
	return flags;
  40088a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40088c:	4a12      	ldr	r2, [pc, #72]	; (4008d8 <Reset_Handler+0xbc>)
  40088e:	6813      	ldr	r3, [r2, #0]
  400890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400894:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400896:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40089a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40089e:	b129      	cbz	r1, 4008ac <Reset_Handler+0x90>
		cpu_irq_enable();
  4008a0:	2201      	movs	r2, #1
  4008a2:	4b0c      	ldr	r3, [pc, #48]	; (4008d4 <Reset_Handler+0xb8>)
  4008a4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4008a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4008aa:	b662      	cpsie	i
        __libc_init_array();
  4008ac:	4b0b      	ldr	r3, [pc, #44]	; (4008dc <Reset_Handler+0xc0>)
  4008ae:	4798      	blx	r3
        main();
  4008b0:	4b0b      	ldr	r3, [pc, #44]	; (4008e0 <Reset_Handler+0xc4>)
  4008b2:	4798      	blx	r3
  4008b4:	e7fe      	b.n	4008b4 <Reset_Handler+0x98>
  4008b6:	bf00      	nop
  4008b8:	20400000 	.word	0x20400000
  4008bc:	00400d4c 	.word	0x00400d4c
  4008c0:	20400434 	.word	0x20400434
  4008c4:	204004f0 	.word	0x204004f0
  4008c8:	20400434 	.word	0x20400434
  4008cc:	e000ed00 	.word	0xe000ed00
  4008d0:	00400000 	.word	0x00400000
  4008d4:	20400000 	.word	0x20400000
  4008d8:	e000ed88 	.word	0xe000ed88
  4008dc:	00400bb5 	.word	0x00400bb5
  4008e0:	00400b11 	.word	0x00400b11

004008e4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4008e4:	4b3b      	ldr	r3, [pc, #236]	; (4009d4 <SystemCoreClockUpdate+0xf0>)
  4008e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4008e8:	f003 0303 	and.w	r3, r3, #3
  4008ec:	2b01      	cmp	r3, #1
  4008ee:	d01d      	beq.n	40092c <SystemCoreClockUpdate+0x48>
  4008f0:	b183      	cbz	r3, 400914 <SystemCoreClockUpdate+0x30>
  4008f2:	2b02      	cmp	r3, #2
  4008f4:	d036      	beq.n	400964 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4008f6:	4b37      	ldr	r3, [pc, #220]	; (4009d4 <SystemCoreClockUpdate+0xf0>)
  4008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4008fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4008fe:	2b70      	cmp	r3, #112	; 0x70
  400900:	d05f      	beq.n	4009c2 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400902:	4b34      	ldr	r3, [pc, #208]	; (4009d4 <SystemCoreClockUpdate+0xf0>)
  400904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400906:	4934      	ldr	r1, [pc, #208]	; (4009d8 <SystemCoreClockUpdate+0xf4>)
  400908:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40090c:	680b      	ldr	r3, [r1, #0]
  40090e:	40d3      	lsrs	r3, r2
  400910:	600b      	str	r3, [r1, #0]
  400912:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400914:	4b31      	ldr	r3, [pc, #196]	; (4009dc <SystemCoreClockUpdate+0xf8>)
  400916:	695b      	ldr	r3, [r3, #20]
  400918:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40091c:	bf14      	ite	ne
  40091e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400922:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400926:	4b2c      	ldr	r3, [pc, #176]	; (4009d8 <SystemCoreClockUpdate+0xf4>)
  400928:	601a      	str	r2, [r3, #0]
  40092a:	e7e4      	b.n	4008f6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40092c:	4b29      	ldr	r3, [pc, #164]	; (4009d4 <SystemCoreClockUpdate+0xf0>)
  40092e:	6a1b      	ldr	r3, [r3, #32]
  400930:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400934:	d003      	beq.n	40093e <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400936:	4a2a      	ldr	r2, [pc, #168]	; (4009e0 <SystemCoreClockUpdate+0xfc>)
  400938:	4b27      	ldr	r3, [pc, #156]	; (4009d8 <SystemCoreClockUpdate+0xf4>)
  40093a:	601a      	str	r2, [r3, #0]
  40093c:	e7db      	b.n	4008f6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40093e:	4a29      	ldr	r2, [pc, #164]	; (4009e4 <SystemCoreClockUpdate+0x100>)
  400940:	4b25      	ldr	r3, [pc, #148]	; (4009d8 <SystemCoreClockUpdate+0xf4>)
  400942:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400944:	4b23      	ldr	r3, [pc, #140]	; (4009d4 <SystemCoreClockUpdate+0xf0>)
  400946:	6a1b      	ldr	r3, [r3, #32]
  400948:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40094c:	2b10      	cmp	r3, #16
  40094e:	d005      	beq.n	40095c <SystemCoreClockUpdate+0x78>
  400950:	2b20      	cmp	r3, #32
  400952:	d1d0      	bne.n	4008f6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400954:	4a22      	ldr	r2, [pc, #136]	; (4009e0 <SystemCoreClockUpdate+0xfc>)
  400956:	4b20      	ldr	r3, [pc, #128]	; (4009d8 <SystemCoreClockUpdate+0xf4>)
  400958:	601a      	str	r2, [r3, #0]
          break;
  40095a:	e7cc      	b.n	4008f6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  40095c:	4a22      	ldr	r2, [pc, #136]	; (4009e8 <SystemCoreClockUpdate+0x104>)
  40095e:	4b1e      	ldr	r3, [pc, #120]	; (4009d8 <SystemCoreClockUpdate+0xf4>)
  400960:	601a      	str	r2, [r3, #0]
          break;
  400962:	e7c8      	b.n	4008f6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400964:	4b1b      	ldr	r3, [pc, #108]	; (4009d4 <SystemCoreClockUpdate+0xf0>)
  400966:	6a1b      	ldr	r3, [r3, #32]
  400968:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40096c:	d016      	beq.n	40099c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40096e:	4a1c      	ldr	r2, [pc, #112]	; (4009e0 <SystemCoreClockUpdate+0xfc>)
  400970:	4b19      	ldr	r3, [pc, #100]	; (4009d8 <SystemCoreClockUpdate+0xf4>)
  400972:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400974:	4b17      	ldr	r3, [pc, #92]	; (4009d4 <SystemCoreClockUpdate+0xf0>)
  400976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400978:	f003 0303 	and.w	r3, r3, #3
  40097c:	2b02      	cmp	r3, #2
  40097e:	d1ba      	bne.n	4008f6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400980:	4a14      	ldr	r2, [pc, #80]	; (4009d4 <SystemCoreClockUpdate+0xf0>)
  400982:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400984:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400986:	4814      	ldr	r0, [pc, #80]	; (4009d8 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400988:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40098c:	6803      	ldr	r3, [r0, #0]
  40098e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400992:	b2d2      	uxtb	r2, r2
  400994:	fbb3 f3f2 	udiv	r3, r3, r2
  400998:	6003      	str	r3, [r0, #0]
  40099a:	e7ac      	b.n	4008f6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40099c:	4a11      	ldr	r2, [pc, #68]	; (4009e4 <SystemCoreClockUpdate+0x100>)
  40099e:	4b0e      	ldr	r3, [pc, #56]	; (4009d8 <SystemCoreClockUpdate+0xf4>)
  4009a0:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4009a2:	4b0c      	ldr	r3, [pc, #48]	; (4009d4 <SystemCoreClockUpdate+0xf0>)
  4009a4:	6a1b      	ldr	r3, [r3, #32]
  4009a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009aa:	2b10      	cmp	r3, #16
  4009ac:	d005      	beq.n	4009ba <SystemCoreClockUpdate+0xd6>
  4009ae:	2b20      	cmp	r3, #32
  4009b0:	d1e0      	bne.n	400974 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4009b2:	4a0b      	ldr	r2, [pc, #44]	; (4009e0 <SystemCoreClockUpdate+0xfc>)
  4009b4:	4b08      	ldr	r3, [pc, #32]	; (4009d8 <SystemCoreClockUpdate+0xf4>)
  4009b6:	601a      	str	r2, [r3, #0]
          break;
  4009b8:	e7dc      	b.n	400974 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4009ba:	4a0b      	ldr	r2, [pc, #44]	; (4009e8 <SystemCoreClockUpdate+0x104>)
  4009bc:	4b06      	ldr	r3, [pc, #24]	; (4009d8 <SystemCoreClockUpdate+0xf4>)
  4009be:	601a      	str	r2, [r3, #0]
          break;
  4009c0:	e7d8      	b.n	400974 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4009c2:	4a05      	ldr	r2, [pc, #20]	; (4009d8 <SystemCoreClockUpdate+0xf4>)
  4009c4:	6813      	ldr	r3, [r2, #0]
  4009c6:	4909      	ldr	r1, [pc, #36]	; (4009ec <SystemCoreClockUpdate+0x108>)
  4009c8:	fba1 1303 	umull	r1, r3, r1, r3
  4009cc:	085b      	lsrs	r3, r3, #1
  4009ce:	6013      	str	r3, [r2, #0]
  4009d0:	4770      	bx	lr
  4009d2:	bf00      	nop
  4009d4:	400e0600 	.word	0x400e0600
  4009d8:	20400004 	.word	0x20400004
  4009dc:	400e1810 	.word	0x400e1810
  4009e0:	00b71b00 	.word	0x00b71b00
  4009e4:	003d0900 	.word	0x003d0900
  4009e8:	007a1200 	.word	0x007a1200
  4009ec:	aaaaaaab 	.word	0xaaaaaaab

004009f0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4009f0:	4b16      	ldr	r3, [pc, #88]	; (400a4c <system_init_flash+0x5c>)
  4009f2:	4298      	cmp	r0, r3
  4009f4:	d913      	bls.n	400a1e <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4009f6:	4b16      	ldr	r3, [pc, #88]	; (400a50 <system_init_flash+0x60>)
  4009f8:	4298      	cmp	r0, r3
  4009fa:	d915      	bls.n	400a28 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4009fc:	4b15      	ldr	r3, [pc, #84]	; (400a54 <system_init_flash+0x64>)
  4009fe:	4298      	cmp	r0, r3
  400a00:	d916      	bls.n	400a30 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400a02:	4b15      	ldr	r3, [pc, #84]	; (400a58 <system_init_flash+0x68>)
  400a04:	4298      	cmp	r0, r3
  400a06:	d917      	bls.n	400a38 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400a08:	4b14      	ldr	r3, [pc, #80]	; (400a5c <system_init_flash+0x6c>)
  400a0a:	4298      	cmp	r0, r3
  400a0c:	d918      	bls.n	400a40 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400a0e:	4b14      	ldr	r3, [pc, #80]	; (400a60 <system_init_flash+0x70>)
  400a10:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a12:	bf94      	ite	ls
  400a14:	4a13      	ldrls	r2, [pc, #76]	; (400a64 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400a16:	4a14      	ldrhi	r2, [pc, #80]	; (400a68 <system_init_flash+0x78>)
  400a18:	4b14      	ldr	r3, [pc, #80]	; (400a6c <system_init_flash+0x7c>)
  400a1a:	601a      	str	r2, [r3, #0]
  400a1c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400a22:	4b12      	ldr	r3, [pc, #72]	; (400a6c <system_init_flash+0x7c>)
  400a24:	601a      	str	r2, [r3, #0]
  400a26:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a28:	4a11      	ldr	r2, [pc, #68]	; (400a70 <system_init_flash+0x80>)
  400a2a:	4b10      	ldr	r3, [pc, #64]	; (400a6c <system_init_flash+0x7c>)
  400a2c:	601a      	str	r2, [r3, #0]
  400a2e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a30:	4a10      	ldr	r2, [pc, #64]	; (400a74 <system_init_flash+0x84>)
  400a32:	4b0e      	ldr	r3, [pc, #56]	; (400a6c <system_init_flash+0x7c>)
  400a34:	601a      	str	r2, [r3, #0]
  400a36:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a38:	4a0f      	ldr	r2, [pc, #60]	; (400a78 <system_init_flash+0x88>)
  400a3a:	4b0c      	ldr	r3, [pc, #48]	; (400a6c <system_init_flash+0x7c>)
  400a3c:	601a      	str	r2, [r3, #0]
  400a3e:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a40:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400a44:	4b09      	ldr	r3, [pc, #36]	; (400a6c <system_init_flash+0x7c>)
  400a46:	601a      	str	r2, [r3, #0]
  400a48:	4770      	bx	lr
  400a4a:	bf00      	nop
  400a4c:	015ef3bf 	.word	0x015ef3bf
  400a50:	02bde77f 	.word	0x02bde77f
  400a54:	041cdb3f 	.word	0x041cdb3f
  400a58:	057bceff 	.word	0x057bceff
  400a5c:	06dac2bf 	.word	0x06dac2bf
  400a60:	0839b67f 	.word	0x0839b67f
  400a64:	04000500 	.word	0x04000500
  400a68:	04000600 	.word	0x04000600
  400a6c:	400e0c00 	.word	0x400e0c00
  400a70:	04000100 	.word	0x04000100
  400a74:	04000200 	.word	0x04000200
  400a78:	04000300 	.word	0x04000300

00400a7c <pin_toggle>:
/************************************************************************/

/**
*  Toggle pin controlado pelo PIO (out)
*/
void pin_toggle(Pio *pio, uint32_t mask){
  400a7c:	b538      	push	{r3, r4, r5, lr}
  400a7e:	4604      	mov	r4, r0
  400a80:	460d      	mov	r5, r1
	if(pio_get_output_data_status(pio, mask))
  400a82:	4b06      	ldr	r3, [pc, #24]	; (400a9c <pin_toggle+0x20>)
  400a84:	4798      	blx	r3
  400a86:	b920      	cbnz	r0, 400a92 <pin_toggle+0x16>
	pio_clear(pio, mask);
	else
	pio_set(pio,mask);
  400a88:	4629      	mov	r1, r5
  400a8a:	4620      	mov	r0, r4
  400a8c:	4b04      	ldr	r3, [pc, #16]	; (400aa0 <pin_toggle+0x24>)
  400a8e:	4798      	blx	r3
  400a90:	bd38      	pop	{r3, r4, r5, pc}
	pio_clear(pio, mask);
  400a92:	4629      	mov	r1, r5
  400a94:	4620      	mov	r0, r4
  400a96:	4b03      	ldr	r3, [pc, #12]	; (400aa4 <pin_toggle+0x28>)
  400a98:	4798      	blx	r3
  400a9a:	bd38      	pop	{r3, r4, r5, pc}
  400a9c:	00400251 	.word	0x00400251
  400aa0:	00400221 	.word	0x00400221
  400aa4:	00400225 	.word	0x00400225

00400aa8 <LED_init>:


/**
* @Brief Inicializa o pino do LED
*/
void LED_init(int estado){
  400aa8:	b510      	push	{r4, lr}
  400aaa:	b082      	sub	sp, #8
  400aac:	4604      	mov	r4, r0
	pmc_enable_periph_clk(LED_PIO_ID);
  400aae:	2010      	movs	r0, #16
  400ab0:	4b05      	ldr	r3, [pc, #20]	; (400ac8 <LED_init+0x20>)
  400ab2:	4798      	blx	r3
	pio_set_output(LED_PIO, LED_PIN_MASK, estado, 0, 0 );
  400ab4:	2300      	movs	r3, #0
  400ab6:	9300      	str	r3, [sp, #0]
  400ab8:	4622      	mov	r2, r4
  400aba:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400abe:	4803      	ldr	r0, [pc, #12]	; (400acc <LED_init+0x24>)
  400ac0:	4c03      	ldr	r4, [pc, #12]	; (400ad0 <LED_init+0x28>)
  400ac2:	47a0      	blx	r4
};
  400ac4:	b002      	add	sp, #8
  400ac6:	bd10      	pop	{r4, pc}
  400ac8:	00400439 	.word	0x00400439
  400acc:	400e1400 	.word	0x400e1400
  400ad0:	00400229 	.word	0x00400229

00400ad4 <RTT_Handler>:


void RTT_Handler(void) {
  400ad4:	b510      	push	{r4, lr}
	 rtt_get_status(RTT);
  400ad6:	4c08      	ldr	r4, [pc, #32]	; (400af8 <RTT_Handler+0x24>)
  400ad8:	4620      	mov	r0, r4
  400ada:	4b08      	ldr	r3, [pc, #32]	; (400afc <RTT_Handler+0x28>)
  400adc:	4798      	blx	r3
	 rtt_write_alarm_time(RTT, rtt_read_timer_value(RTT) + 1);
  400ade:	4620      	mov	r0, r4
  400ae0:	4b07      	ldr	r3, [pc, #28]	; (400b00 <RTT_Handler+0x2c>)
  400ae2:	4798      	blx	r3
  400ae4:	1c41      	adds	r1, r0, #1
  400ae6:	4620      	mov	r0, r4
  400ae8:	4b06      	ldr	r3, [pc, #24]	; (400b04 <RTT_Handler+0x30>)
  400aea:	4798      	blx	r3
	/* Avoid compiler warning */
	//UNUSED(ul_dummy);

	/** Muda o estado do LED */
	
	pin_toggle(LED_PIO, LED_PIN_MASK);
  400aec:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400af0:	4805      	ldr	r0, [pc, #20]	; (400b08 <RTT_Handler+0x34>)
  400af2:	4b06      	ldr	r3, [pc, #24]	; (400b0c <RTT_Handler+0x38>)
  400af4:	4798      	blx	r3
  400af6:	bd10      	pop	{r4, pc}
  400af8:	400e1830 	.word	0x400e1830
  400afc:	004007cd 	.word	0x004007cd
  400b00:	004007b9 	.word	0x004007b9
  400b04:	004007d1 	.word	0x004007d1
  400b08:	400e1400 	.word	0x400e1400
  400b0c:	00400a7d 	.word	0x00400a7d

00400b10 <main>:
*/

/************************************************************************/
/* Main Code	                                                        */
/************************************************************************/
int main(void){
  400b10:	b508      	push	{r3, lr}
	/* Initialize the SAM system */
	sysclk_init();
  400b12:	4b19      	ldr	r3, [pc, #100]	; (400b78 <main+0x68>)
  400b14:	4798      	blx	r3

	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400b16:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  400b1a:	4b18      	ldr	r3, [pc, #96]	; (400b7c <main+0x6c>)
  400b1c:	605d      	str	r5, [r3, #4]
	

	/* Configura Leds */
	LED_init(0);
  400b1e:	2000      	movs	r0, #0
  400b20:	4b17      	ldr	r3, [pc, #92]	; (400b80 <main+0x70>)
  400b22:	4798      	blx	r3

	/** Configura timer TC0, canal 1 */
	//TC_init(TC0, ID_TC0, 0, 1.25);
	
	pmc_enable_periph_clk(ID_RTT);
  400b24:	2003      	movs	r0, #3
  400b26:	4b17      	ldr	r3, [pc, #92]	; (400b84 <main+0x74>)
  400b28:	4798      	blx	r3
	//pmc_enable_periph_clk(ID_RTC);
	rtt_init(RTT, 0x8000);
  400b2a:	4c17      	ldr	r4, [pc, #92]	; (400b88 <main+0x78>)
  400b2c:	4629      	mov	r1, r5
  400b2e:	4620      	mov	r0, r4
  400b30:	4b16      	ldr	r3, [pc, #88]	; (400b8c <main+0x7c>)
  400b32:	4798      	blx	r3
	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN | RTT_MR_RTTINCIEN);
  400b34:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  400b38:	4620      	mov	r0, r4
  400b3a:	4b15      	ldr	r3, [pc, #84]	; (400b90 <main+0x80>)
  400b3c:	4798      	blx	r3
	rtt_write_alarm_time(RTT, 1);
  400b3e:	2101      	movs	r1, #1
  400b40:	4620      	mov	r0, r4
  400b42:	4b14      	ldr	r3, [pc, #80]	; (400b94 <main+0x84>)
  400b44:	4798      	blx	r3
	//rtt_sel_source(RTT, true);
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400b46:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400b4a:	4620      	mov	r0, r4
  400b4c:	4b12      	ldr	r3, [pc, #72]	; (400b98 <main+0x88>)
  400b4e:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400b50:	2208      	movs	r2, #8
  400b52:	4b12      	ldr	r3, [pc, #72]	; (400b9c <main+0x8c>)
  400b54:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) ID_RTT);
	rtt_enable(RTT);
  400b56:	4620      	mov	r0, r4
  400b58:	4b11      	ldr	r3, [pc, #68]	; (400ba0 <main+0x90>)
  400b5a:	4798      	blx	r3
	
	//printf("CPU: %d", sysclk_get_cpu_hz());
	//printf("SYS: %d", sysclk_get_peripheral_hz());
	
	pmc_set_fast_startup_input(PMC_FSMR_RTTAL);
  400b5c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  400b60:	4b10      	ldr	r3, [pc, #64]	; (400ba4 <main+0x94>)
  400b62:	4798      	blx	r3
	supc_set_wakeup_mode(SUPC, SUPC_WUMR_RTTEN_ENABLE);
  400b64:	2104      	movs	r1, #4
  400b66:	4810      	ldr	r0, [pc, #64]	; (400ba8 <main+0x98>)
  400b68:	4b10      	ldr	r3, [pc, #64]	; (400bac <main+0x9c>)
  400b6a:	4798      	blx	r3

	while (1) {
		//pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
		pmc_sleep(SAM_PM_SMODE_BACKUP);
  400b6c:	2505      	movs	r5, #5
  400b6e:	4c10      	ldr	r4, [pc, #64]	; (400bb0 <main+0xa0>)
  400b70:	4628      	mov	r0, r5
  400b72:	47a0      	blx	r4
  400b74:	e7fc      	b.n	400b70 <main+0x60>
  400b76:	bf00      	nop
  400b78:	004001ad 	.word	0x004001ad
  400b7c:	400e1850 	.word	0x400e1850
  400b80:	00400aa9 	.word	0x00400aa9
  400b84:	00400439 	.word	0x00400439
  400b88:	400e1830 	.word	0x400e1830
  400b8c:	00400765 	.word	0x00400765
  400b90:	004007a5 	.word	0x004007a5
  400b94:	004007d1 	.word	0x004007d1
  400b98:	00400791 	.word	0x00400791
  400b9c:	e000e100 	.word	0xe000e100
  400ba0:	00400779 	.word	0x00400779
  400ba4:	0040048d 	.word	0x0040048d
  400ba8:	400e1810 	.word	0x400e1810
  400bac:	00400815 	.word	0x00400815
  400bb0:	004004f1 	.word	0x004004f1

00400bb4 <__libc_init_array>:
  400bb4:	b570      	push	{r4, r5, r6, lr}
  400bb6:	4e0f      	ldr	r6, [pc, #60]	; (400bf4 <__libc_init_array+0x40>)
  400bb8:	4d0f      	ldr	r5, [pc, #60]	; (400bf8 <__libc_init_array+0x44>)
  400bba:	1b76      	subs	r6, r6, r5
  400bbc:	10b6      	asrs	r6, r6, #2
  400bbe:	bf18      	it	ne
  400bc0:	2400      	movne	r4, #0
  400bc2:	d005      	beq.n	400bd0 <__libc_init_array+0x1c>
  400bc4:	3401      	adds	r4, #1
  400bc6:	f855 3b04 	ldr.w	r3, [r5], #4
  400bca:	4798      	blx	r3
  400bcc:	42a6      	cmp	r6, r4
  400bce:	d1f9      	bne.n	400bc4 <__libc_init_array+0x10>
  400bd0:	4e0a      	ldr	r6, [pc, #40]	; (400bfc <__libc_init_array+0x48>)
  400bd2:	4d0b      	ldr	r5, [pc, #44]	; (400c00 <__libc_init_array+0x4c>)
  400bd4:	1b76      	subs	r6, r6, r5
  400bd6:	f000 f8a7 	bl	400d28 <_init>
  400bda:	10b6      	asrs	r6, r6, #2
  400bdc:	bf18      	it	ne
  400bde:	2400      	movne	r4, #0
  400be0:	d006      	beq.n	400bf0 <__libc_init_array+0x3c>
  400be2:	3401      	adds	r4, #1
  400be4:	f855 3b04 	ldr.w	r3, [r5], #4
  400be8:	4798      	blx	r3
  400bea:	42a6      	cmp	r6, r4
  400bec:	d1f9      	bne.n	400be2 <__libc_init_array+0x2e>
  400bee:	bd70      	pop	{r4, r5, r6, pc}
  400bf0:	bd70      	pop	{r4, r5, r6, pc}
  400bf2:	bf00      	nop
  400bf4:	00400d34 	.word	0x00400d34
  400bf8:	00400d34 	.word	0x00400d34
  400bfc:	00400d3c 	.word	0x00400d3c
  400c00:	00400d34 	.word	0x00400d34

00400c04 <register_fini>:
  400c04:	4b02      	ldr	r3, [pc, #8]	; (400c10 <register_fini+0xc>)
  400c06:	b113      	cbz	r3, 400c0e <register_fini+0xa>
  400c08:	4802      	ldr	r0, [pc, #8]	; (400c14 <register_fini+0x10>)
  400c0a:	f000 b805 	b.w	400c18 <atexit>
  400c0e:	4770      	bx	lr
  400c10:	00000000 	.word	0x00000000
  400c14:	00400c25 	.word	0x00400c25

00400c18 <atexit>:
  400c18:	2300      	movs	r3, #0
  400c1a:	4601      	mov	r1, r0
  400c1c:	461a      	mov	r2, r3
  400c1e:	4618      	mov	r0, r3
  400c20:	f000 b81e 	b.w	400c60 <__register_exitproc>

00400c24 <__libc_fini_array>:
  400c24:	b538      	push	{r3, r4, r5, lr}
  400c26:	4c0a      	ldr	r4, [pc, #40]	; (400c50 <__libc_fini_array+0x2c>)
  400c28:	4d0a      	ldr	r5, [pc, #40]	; (400c54 <__libc_fini_array+0x30>)
  400c2a:	1b64      	subs	r4, r4, r5
  400c2c:	10a4      	asrs	r4, r4, #2
  400c2e:	d00a      	beq.n	400c46 <__libc_fini_array+0x22>
  400c30:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400c34:	3b01      	subs	r3, #1
  400c36:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400c3a:	3c01      	subs	r4, #1
  400c3c:	f855 3904 	ldr.w	r3, [r5], #-4
  400c40:	4798      	blx	r3
  400c42:	2c00      	cmp	r4, #0
  400c44:	d1f9      	bne.n	400c3a <__libc_fini_array+0x16>
  400c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400c4a:	f000 b877 	b.w	400d3c <_fini>
  400c4e:	bf00      	nop
  400c50:	00400d4c 	.word	0x00400d4c
  400c54:	00400d48 	.word	0x00400d48

00400c58 <__retarget_lock_acquire_recursive>:
  400c58:	4770      	bx	lr
  400c5a:	bf00      	nop

00400c5c <__retarget_lock_release_recursive>:
  400c5c:	4770      	bx	lr
  400c5e:	bf00      	nop

00400c60 <__register_exitproc>:
  400c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400c64:	4d2c      	ldr	r5, [pc, #176]	; (400d18 <__register_exitproc+0xb8>)
  400c66:	4606      	mov	r6, r0
  400c68:	6828      	ldr	r0, [r5, #0]
  400c6a:	4698      	mov	r8, r3
  400c6c:	460f      	mov	r7, r1
  400c6e:	4691      	mov	r9, r2
  400c70:	f7ff fff2 	bl	400c58 <__retarget_lock_acquire_recursive>
  400c74:	4b29      	ldr	r3, [pc, #164]	; (400d1c <__register_exitproc+0xbc>)
  400c76:	681c      	ldr	r4, [r3, #0]
  400c78:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400c7c:	2b00      	cmp	r3, #0
  400c7e:	d03e      	beq.n	400cfe <__register_exitproc+0x9e>
  400c80:	685a      	ldr	r2, [r3, #4]
  400c82:	2a1f      	cmp	r2, #31
  400c84:	dc1c      	bgt.n	400cc0 <__register_exitproc+0x60>
  400c86:	f102 0e01 	add.w	lr, r2, #1
  400c8a:	b176      	cbz	r6, 400caa <__register_exitproc+0x4a>
  400c8c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  400c90:	2401      	movs	r4, #1
  400c92:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400c96:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400c9a:	4094      	lsls	r4, r2
  400c9c:	4320      	orrs	r0, r4
  400c9e:	2e02      	cmp	r6, #2
  400ca0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400ca4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400ca8:	d023      	beq.n	400cf2 <__register_exitproc+0x92>
  400caa:	3202      	adds	r2, #2
  400cac:	f8c3 e004 	str.w	lr, [r3, #4]
  400cb0:	6828      	ldr	r0, [r5, #0]
  400cb2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400cb6:	f7ff ffd1 	bl	400c5c <__retarget_lock_release_recursive>
  400cba:	2000      	movs	r0, #0
  400cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400cc0:	4b17      	ldr	r3, [pc, #92]	; (400d20 <__register_exitproc+0xc0>)
  400cc2:	b30b      	cbz	r3, 400d08 <__register_exitproc+0xa8>
  400cc4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400cc8:	f3af 8000 	nop.w
  400ccc:	4603      	mov	r3, r0
  400cce:	b1d8      	cbz	r0, 400d08 <__register_exitproc+0xa8>
  400cd0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400cd4:	6002      	str	r2, [r0, #0]
  400cd6:	2100      	movs	r1, #0
  400cd8:	6041      	str	r1, [r0, #4]
  400cda:	460a      	mov	r2, r1
  400cdc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  400ce0:	f04f 0e01 	mov.w	lr, #1
  400ce4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400ce8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400cec:	2e00      	cmp	r6, #0
  400cee:	d0dc      	beq.n	400caa <__register_exitproc+0x4a>
  400cf0:	e7cc      	b.n	400c8c <__register_exitproc+0x2c>
  400cf2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400cf6:	430c      	orrs	r4, r1
  400cf8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400cfc:	e7d5      	b.n	400caa <__register_exitproc+0x4a>
  400cfe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400d02:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400d06:	e7bb      	b.n	400c80 <__register_exitproc+0x20>
  400d08:	6828      	ldr	r0, [r5, #0]
  400d0a:	f7ff ffa7 	bl	400c5c <__retarget_lock_release_recursive>
  400d0e:	f04f 30ff 	mov.w	r0, #4294967295
  400d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400d16:	bf00      	nop
  400d18:	20400430 	.word	0x20400430
  400d1c:	00400d24 	.word	0x00400d24
  400d20:	00000000 	.word	0x00000000

00400d24 <_global_impure_ptr>:
  400d24:	20400008                                ..@ 

00400d28 <_init>:
  400d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400d2a:	bf00      	nop
  400d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400d2e:	bc08      	pop	{r3}
  400d30:	469e      	mov	lr, r3
  400d32:	4770      	bx	lr

00400d34 <__init_array_start>:
  400d34:	00400c05 	.word	0x00400c05

00400d38 <__frame_dummy_init_array_entry>:
  400d38:	00400165                                e.@.

00400d3c <_fini>:
  400d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400d3e:	bf00      	nop
  400d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400d42:	bc08      	pop	{r3}
  400d44:	469e      	mov	lr, r3
  400d46:	4770      	bx	lr

00400d48 <__fini_array_start>:
  400d48:	00400141 	.word	0x00400141
